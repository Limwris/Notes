apply plugin: 'com.android.application'

import org.gradle.api.tasks.testing.logging.TestLogEvent

// See https://medium.com/@cesarmcferreira/gradle-tips-tricks-to-survive-the-zombie-apocalypse-3dd996604341#.myf6bg50h
android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    def versionPropsFile = file('version.properties')
    if (versionPropsFile.canRead()) {
        def Properties versionProps = new Properties()

        versionProps.load(new FileInputStream(versionPropsFile))
        def versionMajor = versionProps['VERSION_MAJOR'].toInteger()
        def versionMinor = versionProps['VERSION_MINOR'].toInteger()
        def versionBuild = versionProps['VERSION_BUILD'].toInteger()
        def versionNumber = versionMajor * 10000 + versionMinor * 1000 + versionBuild

        defaultConfig {
            applicationId "com.nichesoftware.notes"
            minSdkVersion rootProject.ext.minSdkVersion
            targetSdkVersion rootProject.ext.targetSdkVersion
            versionCode versionNumber
            versionName "${versionMajor}.${versionMinor} (${versionBuild})"

            // Gradle Plugin 1.5
            // disable limited support for vector drawables for Android Studio 1.4
            generatedDensities = ['xxhdpi', 'xhdpi', 'hdpi']

            // Gradle Plugin 2.0
            // disable limited support for vector drawables for Android Studio 1.4
            // vectorDrawables.useSupportLibrary = true
        }
    } else {
        throw new GradleException("Could not read version.properties !")
    }

    // Gradle Plugin 1.5
    // disable limited support for vector drawables for Android Studio 1.4
    aaptOptions {
        additionalParameters "--no-version-vectors"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    // If you need to add more flavors, consider using flavor dimensions.
    productFlavors {
        mock {
            // Permit to fasten build (gradle plugin pred-dex each module)
            minSdkVersion 21
            applicationIdSuffix = ".mock"
        }
        prod {

        }
    }

    // Remove mockRelease as it's not needed.
    android.variantFilter { variant ->
        if(variant.buildType.name.equals('release')
                && variant.getFlavors().get(0).name.equals('mock')) {
            variant.setIgnore(true);
        }
    }

    testOptions {
        // "Method ... not mocked." (See: http://tools.android.com/tech-docs/unit-testing-support#TOC-Method)
        unitTests.returnDefaultValues = true
    }

    lintOptions {
        abortOnError false
    }
}

// Unit tests output directly to the console
tasks.matching {it instanceof Test}.all {
    println(':Test ' + it)
    testLogging.events = [TestLogEvent.FAILED,
                          TestLogEvent.PASSED,
                          TestLogEvent.SKIPPED,
                          TestLogEvent.STANDARD_ERROR,
                          TestLogEvent.STANDARD_OUT]
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile new StringBuffer('com.android.support:appcompat-v7:').append(rootProject.ext.supportLibVersion).toString()
    compile new StringBuffer('com.android.support:recyclerview-v7:').append(rootProject.ext.supportLibVersion).toString()
    compile new StringBuffer('com.android.support:cardview-v7:').append(rootProject.ext.supportLibVersion).toString()
    compile new StringBuffer('com.android.support:design:').append(rootProject.ext.supportLibVersion).toString()
    compile new StringBuffer('com.android.support:support-vector-drawable:').append(rootProject.ext.supportLibVersion).toString()
    // Retrofit
    compile new StringBuffer('com.squareup.retrofit2:retrofit:').append(rootProject.ext.retrofitVersion).toString()
    compile new StringBuffer('com.squareup.retrofit2:converter-gson:').append(rootProject.ext.retrofitVersion).toString()
    // GCM
    compile new StringBuffer("com.google.android.gms:play-services:").append(rootProject.ext.playServicesVersion).toString()


    testCompile new StringBuffer('junit:junit:').append(rootProject.ext.junitVersion).toString()
    testCompile new StringBuffer('org.mockito:mockito-all:').append(rootProject.ext.mockitoVersion).toString()
    testCompile new StringBuffer('org.powermock:powermock-module-junit4:').append(rootProject.ext.powerMockVersion).toString()
    testCompile new StringBuffer('org.powermock:powermock-api-mockito:').append(rootProject.ext.powerMockVersion).toString()
}

// Auto increment build version
// Sources:  - http://bryankrosenbaum.com/2013/11/27/getting-to-know-gradle-auto-increment-version-and-signing-releases/
//           - http://stackoverflow.com/questions/21405457/autoincrement-versioncode-with-gradle-extra-properties
task incrementVersion << {
    println(":incrementVersion - Incrementing Version...")

    def versionPropsFile = file('version.properties')
    if (versionPropsFile.canRead()) {
        def Properties versionProps = new Properties()

        versionProps.load(new FileInputStream(versionPropsFile))
        // Increment version build
        def versionBuild = versionProps['VERSION_BUILD'].toInteger()
        println(":incrementVersion - current versionCode=" + versionBuild);
        versionBuild += 1
        println(":incrementVersion - next versionCode=" + versionBuild);
        // Store it
        versionProps['VERSION_BUILD'] = versionBuild.toString()
        versionProps.store(versionPropsFile.newWriter(), null)
    } else {
        throw new GradleException("Could not read version.properties !")
    }
    println(":incrementVersion - Version incremented...")
}

build.dependsOn 'incrementVersion'